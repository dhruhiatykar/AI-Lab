import random
import math

N = 4  # Number of queens

def random_state():
    """Generates a random state: one queen per column, placed in a random row"""
    return [random.randint(0, N - 1) for _ in range(N)]

def compute_heuristic(state):
    """Counts number of pairs of queens that are attacking each other"""
    conflicts = 0
    for i in range(N):
        for j in range(i + 1, N):
            if state[i] == state[j] or abs(state[i] - state[j]) == abs(i - j):
                conflicts += 1
    return conflicts

def get_random_neighbor(state):
    """Generates a neighbor by randomly moving one queen to another row in the same column"""
    neighbor = state.copy()
    col = random.randint(0, N - 1)
    row = random.randint(0, N - 1)
    while neighbor[col] == row:
        row = random.randint(0, N - 1)
    neighbor[col] = row
    return neighbor

def print_board(state):
    """Prints the board in a human-readable format"""
    for row in range(N):
        line = ""
        for col in range(N):
            if state[col] == row:
                line += " Q "
            else:
                line += " . "
        print(line)
    print()

def simulated_annealing(max_iterations=10000, initial_temp=100.0, cooling_rate=0.99):
    current = random_state()
    current_heuristic = compute_heuristic(current)
    temperature = initial_temp
    steps = 0

    for step in range(max_iterations):
        if current_heuristic == 0:
            return current, steps, True  # Found solution

        neighbor = get_random_neighbor(current)
        neighbor_heuristic = compute_heuristic(neighbor)
        delta_e = current_heuristic - neighbor_heuristic

        if delta_e > 0 or random.uniform(0, 1) < math.exp(delta_e / temperature):
            current = neighbor
            current_heuristic = neighbor_heuristic

        temperature *= cooling_rate
        steps += 1

        if temperature < 1e-3:
            break  

    return current, steps, False  # Did not find perfect solution

solution, steps_taken, is_solution = simulated_annealing()


print("Final State (Column-wise queen positions):", solution)
print("Heuristic Value (0 = perfect solution):", compute_heuristic(solution))
print("Steps taken:", steps_taken)
print(" Board Layout:\n")
print_board(solution)

if is_solution:
    print("Success! Found a valid solution.")
else:
    print(" Did not find a perfect solution. Try increasing max_iterations or adjusting parameters.")
